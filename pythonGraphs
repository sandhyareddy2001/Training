class Graph:
    d={}
    def __init__(self,t):
        for i in t:
            self.d[i[0]]=[]
            self.d[i[1]]=[]
        
        for i in t:
            self.d[i[0]].append(i[1])
            self.d[i[1]].append(i[0])
    def beautify(self):
        for i in self.d:
            print(i,self.d[i])
    def createAdjMatrix(self):
        m=[]
        for i in range(len(self.d)):
            m.append([0 for i in range(len(self.d))])
        for i in range(len(m)):
            for j in range(len(m)):
                if j in self.d[i]:
                    m[i][j]=1
        return m
    def bfs(self,root):
        q=[]
        discovered={}
        distance={}
        parent={}
        for i in self.d:
            discovered[i]=False
            distance[i]=0
            parent[i]=None
        discovered[root]=True
        q.append(root)
        idx=0
        while(idx<len(q)):
            k=q[idx]
            idx=idx+1
            for i in self.d[k]:
                if discovered[i]==False:
                    distance[i]=1+distance[k]
                    parent[i]=k
                    q.append(i)
                    discovered[i]=True
        #print(distance)
        #print(parent)
        return q
    def listComponents(self):
        num=1
        visited={}
        for i in self.d:
            visited[i]=False
        def connection(r):
            BFS=self.bfs(r)
            visited[self.d[0][0]]=True
            for i in self.d:
                if i in BFS and visited[i]==False:
                    visited[i]=True
            
        connection(self.d[0][0])     
        for i in visited:
            if visited[i]==False:
                num=num+1
                connection(i)
        return(num)
    def isConnected(self):
        BFS=self.bfs(self.d[0][0])
        if len(BFS)!=len(self.d):
            return False
        else:
            return True
    def dfs(self,root):
        s=[]
        result=[]
        s.append(root)
        discovered={}
        for i in self.d:
            discovered[i]=False
        #discovered[root]=True
        while(len(s)>0):
            v=s.pop()
            if discovered[v]==False:
                discovered[v]=True
                result.append(v)
                for i in self.d[v]:
                    s.append(i)
        return(result)
    
        
                
            
            
            
t=[(0,1),(0,4),(1,2),(1,3),(1,4),(2,3),(3,4)]
T=[(0,1),(0,3),(1,2),(2,3),(4,5),(4,6),(5,6),(7,8),(9,10)]
TT=[(1,0),(1,2),(3,0),(3,4),(0,2)]
g=Graph(TT)
#g.beautify()
#print(g.isConnected())
print(g.listComponents())   
print(g.bfs(3))
print(g.dfs(3))
